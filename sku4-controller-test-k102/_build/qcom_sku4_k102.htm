<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\..\_build\qcom_sku4_k102.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\..\_build\qcom_sku4_k102.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 15 10:41:47 2022
<BR><P>
<H3>Maximum Stack Usage =        872 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
imu_handler &rArr; imu_calib &rArr; tryCalibration &rArr; calibrateAcc &rArr; matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">NMI_Handler</a><BR>
 <LI><a href="#[24]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">HardFault_Handler</a><BR>
 <LI><a href="#[25]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[26]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">BusFault_Handler</a><BR>
 <LI><a href="#[27]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">UsageFault_Handler</a><BR>
 <LI><a href="#[28]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">SVC_Handler</a><BR>
 <LI><a href="#[29]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">DebugMon_Handler</a><BR>
 <LI><a href="#[2a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">PendSV_Handler</a><BR>
 <LI><a href="#[2b]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">SysTick_Handler</a><BR>
 <LI><a href="#[3b]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[93]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[92]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
 <LI><a href="#[152]">core_off</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[152]">core_off</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3b]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3f]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3a]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[50]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">GetRawdata</a> from imu_usr.o(i.GetRawdata) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[24]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4f]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4a]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[49]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[48]">PWM0_IRQHandler</a> from nrfx_pwm.o(i.PWM0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4b]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4c]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3e]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">RADIO_IRQHandler</a> from nrf_esb.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3d]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4e]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SAADC_IRQHandler</a> from nrfx_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_spim.o(.constdata)
 <LI><a href="#[2f]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from nrfx_twi.o(.constdata)
 <LI><a href="#[30]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrfx_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4d]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[40]">SWI0_EGU0_IRQHandler</a> from nrf_esb.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[41]">SWI1_EGU1_IRQHandler</a> from app_timer.o(i.SWI1_EGU1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[42]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[43]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[44]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[45]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">SensorConfig</a> from imu_usr.o(i.SensorConfig) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[4]">SensorDeinit</a> from imu_usr.o(i.SensorDeinit) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[6]">SensorRaw2u</a> from imu_usr.o(i.SensorRaw2u) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[3]">Sensorinit</a> from imu_usr.o(i.Sensorinit) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[2]">Setdatacb</a> from imu_usr.o(i.Setdatacb) referenced 2 times from imu_usr.o(.data)
 <LI><a href="#[2b]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[52]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[38]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[36]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[46]">TIMER3_IRQHandler</a> from nrf_esb.o(i.TIMER3_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[47]">TIMER4_IRQHandler</a> from nrfx_timer.o(i.TIMER4_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3c]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[53]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[7]">akmGetRawdata</a> from akm09911.o(i.akmGetRawdata) referenced 2 times from akm09911.o(.data)
 <LI><a href="#[9]">akmSensorDeinit</a> from akm09911.o(i.akmSensorDeinit) referenced 2 times from akm09911.o(.data)
 <LI><a href="#[b]">akmSensorRaw2u</a> from akm09911.o(i.akmSensorRaw2u) referenced 2 times from akm09911.o(.data)
 <LI><a href="#[8]">akmSensorinit</a> from akm09911.o(i.akmSensorinit) referenced 2 times from akm09911.o(.data)
 <LI><a href="#[a]">akmSsensorConfig</a> from akm09911.o(i.akmSsensorConfig) referenced 2 times from akm09911.o(.data)
 <LI><a href="#[59]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[10]">aw8624_haptic_f0_cali_show</a> from aw8624_debug_attr.o(i.aw8624_haptic_f0_cali_show) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[17]">aw8624_haptic_f0_calibration</a> from aw8624.o(i.aw8624_haptic_f0_calibration) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[19]">aw8624_haptic_f0_default_set</a> from aw8624.o(i.aw8624_haptic_f0_default_set) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[f]">aw8624_haptic_f0_show</a> from aw8624_debug_attr.o(i.aw8624_haptic_f0_show) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[20]">aw8624_haptic_get_calilra_from_nvram</a> from aw8624.o(i.aw8624_haptic_get_calilra_from_nvram) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1a]">aw8624_haptic_get_hw_irq_status</a> from aw8624.o(i.aw8624_haptic_get_hw_irq_status) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[11]">aw8624_haptic_init</a> from aw8624.o(i.aw8624_haptic_init) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1b]">aw8624_haptic_irq_handler</a> from aw8624.o(i.aw8624_haptic_irq_handler) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[15]">aw8624_haptic_long_vib_work</a> from aw8624.o(i.aw8624_haptic_long_vib_work) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[16]">aw8624_haptic_long_vib_work_getdur</a> from aw8624.o(i.aw8624_haptic_long_vib_work_getdur) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[12]">aw8624_haptic_lra_resistance_detector</a> from aw8624.o(i.aw8624_haptic_lra_resistance_detector) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[e]">aw8624_haptic_ram_show</a> from aw8624_debug_attr.o(i.aw8624_haptic_ram_show) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[c]">aw8624_haptic_reg_show</a> from aw8624_debug_attr.o(i.aw8624_haptic_reg_show) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[d]">aw8624_haptic_reg_store</a> from aw8624_debug_attr.o(i.aw8624_haptic_reg_store) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1c]">aw8624_haptic_rtp_vib_work</a> from aw8624.o(i.aw8624_haptic_rtp_vib_work) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1f]">aw8624_haptic_set_hw_irq_status</a> from aw8624.o(i.aw8624_haptic_set_hw_irq_status) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[14]">aw8624_haptic_short_vib_work</a> from aw8624.o(i.aw8624_haptic_short_vib_work) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[18]">aw8624_haptic_stop</a> from aw8624.o(i.aw8624_haptic_stop) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1e]">aw8624_haptic_trig_mode_cfg</a> from aw8624.o(i.aw8624_haptic_trig_mode_cfg) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[13]">aw8624_haptic_vbat_monitor_detector</a> from aw8624.o(i.aw8624_haptic_vbat_monitor_detector) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[1d]">aw8624_haptic_vib_work_cancel</a> from aw8624.o(i.aw8624_haptic_vib_work_cancel) referenced 2 times from aw_common.o(.data)
 <LI><a href="#[60]">battery_set_data</a> from battery.o(i.battery_set_data) referenced from ctll.o(i.get_boardId_batteryInitLevel)
 <LI><a href="#[60]">battery_set_data</a> from battery.o(i.battery_set_data) referenced from ctll.o(i.saadc_init_chanel)
 <LI><a href="#[7b]">boardId_batteryLevel_callback</a> from saadc.o(i.boardId_batteryLevel_callback) referenced from saadc.o(i.saadc_boardId_batteryLevel_init)
 <LI><a href="#[8f]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[66]">bsp_event_handler</a> from ctll.o(i.bsp_event_handler) referenced from ctll.o(i.main)
 <LI><a href="#[57]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[67]">client_sys_tick_cb</a> from ctll.o(i.client_sys_tick_cb) referenced from ctll.o(i.main)
 <LI><a href="#[55]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[8b]">erase</a> from nrf_fstorage_nvmc.o(i.erase) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[74]">fds_evt_handler</a> from persist.o(i.fds_evt_handler) referenced from persist.o(i.persist_init)
 <LI><a href="#[5e]">fr_event</a> from fr2522.o(i.fr_event) referenced from fr2522.o(i.fr_init)
 <LI><a href="#[5d]">fr_handler</a> from fr2522.o(i.fr_handler) referenced from fr2522.o(i.fr_init)
 <LI><a href="#[21]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[54]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[7d]">hall1_set</a> from input.o(i.hall1_set) referenced from ctll.o(i.saadc_init_chanel)
 <LI><a href="#[7e]">hall2_set</a> from input.o(i.hall2_set) referenced from ctll.o(i.saadc_init_chanel)
 <LI><a href="#[5f]">id_set</a> from input.o(i.id_set) referenced from ctll.o(i.get_boardId_batteryInitLevel)
 <LI><a href="#[61]">imu_handler</a> from imu_wrp.o(i.imu_handler) referenced from imu_wrp.o(i.imu_init)
 <LI><a href="#[87]">init</a> from nrf_fstorage_nvmc.o(i.init) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[8e]">is_busy</a> from nrf_fstorage_nvmc.o(i.is_busy) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[62]">led_handler</a> from led.o(i.led_handler) referenced from led.o(i.led_init)
 <LI><a href="#[58]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[64]">lsm_read</a> from lsm_usr.o(i.lsm_read) referenced from lsm_usr.o(i.lsmAppInit)
 <LI><a href="#[63]">lsm_write</a> from lsm_usr.o(i.lsm_write) referenced from lsm_usr.o(i.lsmAppInit)
 <LI><a href="#[65]">mag_handler</a> from imu_wrp.o(i.mag_handler) referenced from imu_wrp.o(i.mag_init)
 <LI><a href="#[51]">main</a> from ctll.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[70]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.nrf_esb_start_rx)
 <LI><a href="#[70]">on_radio_disabled_rx</a> from nrf_esb.o(i.on_radio_disabled_rx) referenced from nrf_esb.o(i.on_radio_disabled_rx_ack)
 <LI><a href="#[71]">on_radio_disabled_rx_ack</a> from nrf_esb.o(i.on_radio_disabled_rx_ack) referenced from nrf_esb.o(i.on_radio_disabled_rx)
 <LI><a href="#[73]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
 <LI><a href="#[73]">on_radio_disabled_tx</a> from nrf_esb.o(i.on_radio_disabled_tx) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[82]">on_radio_disabled_tx_noack</a> from nrf_esb.o(i.on_radio_disabled_tx_noack) referenced from nrf_esb.o(i.start_tx_transaction)
 <LI><a href="#[72]">on_radio_disabled_tx_wait_for_ack</a> from nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack) referenced from nrf_esb.o(i.on_radio_disabled_tx)
 <LI><a href="#[75]">plat_spi_event</a> from imu_usr.o(i.plat_spi_event) referenced from imu_usr.o(i.plat_in_init)
 <LI><a href="#[76]">power_check_handler</a> from power.o(i.power_check_handler) referenced from power.o(i.power_check_init)
 <LI><a href="#[68]">protocal_data_cb</a> from ctll.o(i.protocal_data_cb) referenced from ctll.o(i.main)
 <LI><a href="#[6a]">protocal_data_start</a> from ctll.o(i.protocal_data_start) referenced from ctll.o(i.main)
 <LI><a href="#[6c]">protocal_data_stop</a> from ctll.o(i.protocal_data_stop) referenced from ctll.o(i.main)
 <LI><a href="#[6b]">protocal_datarr_cb</a> from ctll.o(i.protocal_datarr_cb) referenced from ctll.o(i.main)
 <LI><a href="#[6d]">protocal_link_state</a> from ctll.o(i.protocal_link_state) referenced from ctll.o(i.main)
 <LI><a href="#[69]">protocal_size_cb</a> from ctll.o(i.protocal_size_cb) referenced from ctll.o(i.main)
 <LI><a href="#[89]">read</a> from nrf_fstorage_nvmc.o(i.read) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[78]">rf_bond_event</a> from s_rf.o(i.rf_bond_event) referenced from s_rf.o(i.rf_start_bond)
 <LI><a href="#[7a]">rf_data_event</a> from s_rf.o(i.rf_data_event) referenced from s_rf.o(i.rf_start_data)
 <LI><a href="#[77]">rf_timer_bond</a> from s_rf.o(i.rf_timer_bond) referenced from s_rf.o(i.rf_start_bond)
 <LI><a href="#[79]">rf_timer_data</a> from s_rf.o(i.rf_timer_data) referenced from s_rf.o(i.rf_start_data)
 <LI><a href="#[7f]">rm1_set</a> from input.o(i.rm1_set) referenced from ctll.o(i.saadc_init_chanel)
 <LI><a href="#[80]">rm2_set</a> from input.o(i.rm2_set) referenced from ctll.o(i.saadc_init_chanel)
 <LI><a href="#[8c]">rmap</a> from nrf_fstorage_nvmc.o(i.rmap) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[7c]">saadc_callback</a> from saadc.o(i.saadc_callback) referenced from saadc.o(i.saadc_init)
 <LI><a href="#[81]">saadc_time_handler</a> from saadc.o(i.saadc_time_handler) referenced from saadc.o(i.saadc_time_init)
 <LI><a href="#[6e]">spim_evt_handler</a> from nrf_drv_spi.o(i.spim_evt_handler) referenced from nrf_drv_spi.o(i.nrf_drv_spi_init)
 <LI><a href="#[83]">sys_tick_irq</a> from sys.o(i.sys_tick_irq) referenced from sys.o(i.sys_tick_init)
 <LI><a href="#[84]">timeout_handler_scheduled_exec</a> from app_timer.o(i.timeout_handler_scheduled_exec) referenced from app_timer.o(i.timer_timeouts_check)
 <LI><a href="#[5a]">tst_check_handler</a> from test.o(i.tst_check_handler) referenced from test.o(i.factory_test_init)
 <LI><a href="#[5c]">tst_clib_handler</a> from test.o(i.tst_clib_handler) referenced from test.o(i.factory_test_init)
 <LI><a href="#[5b]">tst_clr_handler</a> from test.o(i.tst_clr_handler) referenced from test.o(i.factory_test_init)
 <LI><a href="#[6f]">twi_evt_handler</a> from nrf_drv_twi.o(i.twi_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[88]">uninit</a> from nrf_fstorage_nvmc.o(i.uninit) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[86]">update_rf_payload_format_esb</a> from nrf_esb.o(i.update_rf_payload_format_esb) referenced from nrf_esb.o(i.update_radio_parameters)
 <LI><a href="#[85]">update_rf_payload_format_esb_dpl</a> from nrf_esb.o(i.update_rf_payload_format_esb_dpl) referenced from nrf_esb.o(i.update_radio_parameters)
 <LI><a href="#[56]">vib_timer_handler</a> from aw8624.o(i.vib_timer_handler) referenced from aw8624.o(i.aw8624_haptic_init)
 <LI><a href="#[56]">vib_timer_handler</a> from aw8624.o(i.vib_timer_handler) referenced from aw8624.o(i.aw8624_haptic_long_vib_work)
 <LI><a href="#[8d]">wmap</a> from nrf_fstorage_nvmc.o(i.wmap) referenced from nrf_fstorage_nvmc.o(.constdata)
 <LI><a href="#[8a]">write</a> from nrf_fstorage_nvmc.o(i.write) referenced from nrf_fstorage_nvmc.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[90]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2af]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2b0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2b2]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[218]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[216]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[2b3]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[215]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>

<P><STRONG><a name="[21a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
</UL>

<P><STRONG><a name="[2b4]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[20e]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[92]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>

<P><STRONG><a name="[211]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[93]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>

<P><STRONG><a name="[2b6]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text), UNUSED)

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clr_start
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_calib_start
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_start
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2b7]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_send
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_get_next_usr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteReg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_writes
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_add
</UL>

<P><STRONG><a name="[2b8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[2bb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[2bc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2be]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[a4]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2bf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2c1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2c2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>AKECS_GetData</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, akm09911.o(i.AKECS_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = AKECS_GetData &rArr; AKI2C_RxData &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKI2C_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;akmGetRawdata
</UL>

<P><STRONG><a name="[ae]"></a>DisableIcm20601</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icm_usr.o(i.DisableIcm20601))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DisableIcm20601 &rArr; icm20601SetPwrDefault &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetPwrDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorDeinit
</UL>

<P><STRONG><a name="[b0]"></a>Disablelsm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm_usr.o(i.Disablelsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Disablelsm &rArr; lsm6dsr_xl_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSensorDeinit
</UL>

<P><STRONG><a name="[32]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 346 bytes, Stack size 72 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>GetRawdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu_usr.o(i.GetRawdata))
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>MadgwickAHRSupdateIMU</STRONG> (Thumb, 852 bytes, Stack size 48 bytes, madgwickahrs.o(i.MadgwickAHRSupdateIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MadgwickAHRSupdateIMU &rArr; MadgwickInit &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateWithoutMag
</UL>

<P><STRONG><a name="[be]"></a>MadgwickAHRSupdateWithoutMag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, madgwickahrs.o(i.MadgwickAHRSupdateWithoutMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MadgwickAHRSupdateWithoutMag &rArr; MadgwickAHRSupdateIMU &rArr; MadgwickInit &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[bd]"></a>MadgwickInit</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, madgwickahrs.o(i.MadgwickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MadgwickInit &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matToQuat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
</UL>

<P><STRONG><a name="[c0]"></a>NORM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, madgwickahrs.o(i.NORM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NORM &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matToQuat
</UL>

<P><STRONG><a name="[48]"></a>PWM0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_pwm.o(i.PWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_IRQHandler &rArr; irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RADIO_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_esb.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; app_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SAADC_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, nrfx_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20a]"></a>SIGN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, madgwickahrs.o(i.SIGN))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matToQuat
</UL>

<P><STRONG><a name="[2f]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrfx_spim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_spim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler &rArr; twi_irq_handler &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twi.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_esb.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI0_EGU0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI1_EGU1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI1_EGU1_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SensorConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, imu_usr.o(i.SensorConfig))
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>SensorDeinit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, imu_usr.o(i.SensorDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SensorDeinit &rArr; DisableIcm20601 &rArr; icm20601SetPwrDefault &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSensorDeinit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIcm20601
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SensorRaw2u</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu_usr.o(i.SensorRaw2u))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SensorRaw2u &rArr; lsmSensorRaw2u
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSensorRaw2u
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmSensorRaw2u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Sensorinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, imu_usr.o(i.Sensorinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Sensorinit &rArr; icmSensorinit &rArr; icm20601AppInit &rArr; icm20601SetSensorPeriod &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSensorinit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmSensorinit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_plat_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>SetAccCalibrateDir</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, imucalibration.o(i.SetAccCalibrateDir))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
</UL>

<P><STRONG><a name="[2]"></a>Setdatacb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, imu_usr.o(i.Setdatacb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Setdatacb
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSetdatacb
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmSetdatacb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>SystemInit</STRONG> (Thumb, 726 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.TIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER4_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>TestRegDebug</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, icm20601.o(i.TestRegDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TestRegDebug &rArr; icm20601ReadRegOne &rArr; icm20601ReadReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[2e]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[dc]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[e2]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
</UL>

<P><STRONG><a name="[e7]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
</UL>

<P><STRONG><a name="[bc]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateIMU
</UL>

<P><STRONG><a name="[c1]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matToQuat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORM
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cholesky_1
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cholesky
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>

<P><STRONG><a name="[e9]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[ea]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[e1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[eb]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[dd]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[e3]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[e8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[df]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2c4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2c5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e6]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[7]"></a>akmGetRawdata</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, akm09911.o(i.akmGetRawdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = akmGetRawdata &rArr; AKECS_GetData &rArr; AKI2C_RxData &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKECS_GetData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> akm09911.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>akmSensorDeinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, akm09911.o(i.akmSensorDeinit))
<BR>[Address Reference Count : 1]<UL><LI> akm09911.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>akmSensorRaw2u</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, akm09911.o(i.akmSensorRaw2u))
<BR>[Address Reference Count : 1]<UL><LI> akm09911.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>akmSensorinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, akm09911.o(i.akmSensorinit))
<BR>[Address Reference Count : 1]<UL><LI> akm09911.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>akmSsensorConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, akm09911.o(i.akmSsensorConfig))
<BR>[Address Reference Count : 1]<UL><LI> akm09911.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[ef]"></a>app_button_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[f4]"></a>app_error_handler_bare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.app_error_handler_bare))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_boardId_batteryLevel_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_scheduled_exec
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clr_start
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_calib_start
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_start
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardId_batteryLevel_callback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_start
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_start
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteReg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start_fast
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_plat_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>

<P><STRONG><a name="[f6]"></a>app_sched_event_put</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[161]"></a>app_sched_execute</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1fa]"></a>app_sched_init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>app_timer_create</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[fa]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>app_timer_start</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clr_start
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_calib_start
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_start
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_start
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start_fast
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start
</UL>

<P><STRONG><a name="[102]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on_always
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_exit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_clr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_calib
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_deinit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_stop
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vib_work_cancel
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_stop
</UL>

<P><STRONG><a name="[f7]"></a>app_util_critical_region_enter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[f8]"></a>app_util_critical_region_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>

<P><STRONG><a name="[104]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[105]"></a>app_util_enable_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[e4]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[10]"></a>aw8624_haptic_f0_cali_show</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aw8624_debug_attr.o(i.aw8624_haptic_f0_cali_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = aw8624_haptic_f0_cali_show &rArr; aw8624_haptic_get_f0 &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>aw8624_haptic_f0_calibration</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_f0_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = aw8624_haptic_f0_calibration &rArr; aw8624_haptic_get_f0 &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>aw8624_haptic_f0_default_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_f0_default_set))
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>aw8624_haptic_f0_show</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aw8624_debug_attr.o(i.aw8624_haptic_f0_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = aw8624_haptic_f0_show &rArr; aw8624_haptic_get_f0 &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>aw8624_haptic_get_calilra_from_nvram</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_get_calilra_from_nvram))
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>aw8624_haptic_get_f0</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, aw8624.o(i.aw8624_haptic_get_f0))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = aw8624_haptic_get_f0 &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_go
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_show
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_calibration
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_cali_show
</UL>

<P><STRONG><a name="[1a]"></a>aw8624_haptic_get_hw_irq_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_get_hw_irq_status))
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>aw8624_haptic_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_haptic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = aw8624_haptic_init &rArr; aw8624_haptic_later_init &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_read_chipid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_hw_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_ram_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>aw8624_haptic_irq_handler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = aw8624_haptic_irq_handler &rArr; aw8624_haptic_set_rtp_aei &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_writes
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_rtp_aei
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_get_fifo_afi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>aw8624_haptic_long_vib_work</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_long_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = aw8624_haptic_long_vib_work &rArr; aw8624_haptic_start &rArr; aw8624_haptic_play_go &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_upload_lra
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_seq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_gain
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>aw8624_haptic_long_vib_work_getdur</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_long_vib_work_getdur))
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>aw8624_haptic_lra_resistance_detector</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_lra_resistance_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = aw8624_haptic_lra_resistance_detector &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>aw8624_haptic_ram_show</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, aw8624_debug_attr.o(i.aw8624_haptic_ram_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aw8624_haptic_ram_show &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>aw8624_haptic_reg_show</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, aw8624_debug_attr.o(i.aw8624_haptic_reg_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aw8624_haptic_reg_show &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>aw8624_haptic_reg_store</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aw8624_debug_attr.o(i.aw8624_haptic_reg_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aw8624_haptic_reg_store &rArr; aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>aw8624_haptic_rtp_vib_work</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_rtp_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = aw8624_haptic_rtp_vib_work &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_interrupt_clear
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_rtp_aei
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_gain
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_going
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>aw8624_haptic_set_hw_irq_status</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_set_hw_irq_status))
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>aw8624_haptic_short_vib_work</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_haptic_short_vib_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aw8624_haptic_short_vib_work &rArr; aw8624_haptic_start &rArr; aw8624_haptic_play_go &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_upload_lra
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_seq
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_loop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_gain
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>aw8624_haptic_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aw8624_haptic_start &rArr; aw8624_haptic_play_go &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_go
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_active
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[18]"></a>aw8624_haptic_stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_haptic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_go
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_timer_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vib_work_cancel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vbat_monitor_detector
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_lra_resistance_detector
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>aw8624_haptic_trig_mode_cfg</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_trig_mode_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = aw8624_haptic_trig_mode_cfg &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[118]"></a>aw8624_haptic_upload_lra</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_upload_lra))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = aw8624_haptic_upload_lra &rArr; aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[13]"></a>aw8624_haptic_vbat_monitor_detector</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_vbat_monitor_detector))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = aw8624_haptic_vbat_monitor_detector &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>aw8624_haptic_vib_work_cancel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_vib_work_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = aw8624_haptic_vib_work_cancel &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aw_common.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>aw8624_hw_reset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_hw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aw8624_hw_reset &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
</UL>

<P><STRONG><a name="[10b]"></a>aw8624_i2c_read</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, aw8624.o(i.aw8624_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_read_chipid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_interrupt_clear
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_going
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_get_fifo_afi
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vbat_monitor_detector
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_reg_show
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_show
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_lra_resistance_detector
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_irq_handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_calibration
</UL>

<P><STRONG><a name="[10a]"></a>aw8624_i2c_write</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, aw8624.o(i.aw8624_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_upload_lra
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_ram_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_seq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_gain
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_break
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vbat_monitor_detector
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_trig_mode_cfg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_reg_store
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_show
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_lra_resistance_detector
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_calibration
</UL>

<P><STRONG><a name="[107]"></a>aw8624_i2c_write_bits</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_i2c_write_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_ram_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_swicth_motorprotect_config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_wav_loop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_rtp_aei
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_go
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_active
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vbat_monitor_detector
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_trig_mode_cfg
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_show
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_lra_resistance_detector
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
</UL>

<P><STRONG><a name="[113]"></a>aw8624_i2c_writes</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_i2c_writes))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = aw8624_i2c_writes &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_going
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_irq_handler
</UL>

<P><STRONG><a name="[110]"></a>aw8624_read_chipid</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_read_chipid))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aw8624_read_chipid &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
</UL>

<P><STRONG><a name="[268]"></a>battery_get_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battery.o(i.battery_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[60]"></a>battery_set_data</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, battery.o(i.battery_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = battery_set_data
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ctll.o(i.get_boardId_batteryInitLevel)
<LI> ctll.o(i.saadc_init_chanel)
</UL>
<P><STRONG><a name="[121]"></a>battery_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battery.o(i.battery_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = battery_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[7b]"></a>boardId_batteryLevel_callback</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, saadc.o(i.boardId_batteryLevel_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = boardId_batteryLevel_callback &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saadc.o(i.saadc_boardId_batteryLevel_init)
</UL>
<P><STRONG><a name="[12c]"></a>bsp_board_button_state_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[123]"></a>bsp_board_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, boards.o(i.bsp_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_board_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>bsp_board_led_invert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
</UL>

<P><STRONG><a name="[126]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
</UL>

<P><STRONG><a name="[128]"></a>bsp_board_led_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on_always
</UL>

<P><STRONG><a name="[138]"></a>bsp_board_led_state_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[125]"></a>bsp_board_leds_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
</UL>

<P><STRONG><a name="[129]"></a>bsp_board_leds_on</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[12a]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[12b]"></a>bsp_button_is_pressed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_off
</UL>

<P><STRONG><a name="[135]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[134]"></a>bsp_init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>calibrateAcc</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, imucalibration.o(i.calibrateAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = calibrateAcc &rArr; matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_t_mul_vector
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_t_mul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_mul_vector
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[13e]"></a>calibrateMag</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, imucalibration.o(i.calibrateMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = calibrateMag &rArr; matrix_inv_1 &rArr; cholesky_1 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMagCalibration
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_t_mul_vector_1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_t_mul_1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_mul_vector_1
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv_1
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[147]"></a>checkAccDirection</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, imucalibration.o(i.checkAccDirection))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
</UL>

<P><STRONG><a name="[144]"></a>checkGyroAndAccCalibration</STRONG> (Thumb, 692 bytes, Stack size 56 bytes, imucalibration.o(i.checkGyroAndAccCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = checkGyroAndAccCalibration &rArr; resetAccCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetInterval
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAccCalibration
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAccDirection
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAccCalibrateDir
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[14a]"></a>checkMagCalibration</STRONG> (Thumb, 566 bytes, Stack size 56 bytes, imucalibration.o(i.checkMagCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = checkMagCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMagCalibration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[14b]"></a>checkMagDirection</STRONG> (Thumb, 478 bytes, Stack size 8 bytes, imucalibration.o(i.checkMagDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkMagDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagCalibration
</UL>

<P><STRONG><a name="[14d]"></a>cholesky</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, imucalibration.o(i.cholesky))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv
</UL>

<P><STRONG><a name="[14e]"></a>cholesky_1</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, imucalibration.o(i.cholesky_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cholesky_1 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv_1
</UL>

<P><STRONG><a name="[152]"></a>core_off</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, power.o(i.core_off))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_off
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_off
</UL>

<P><STRONG><a name="[1c2]"></a>correctAcc</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, imucalibration.o(i.correctAcc))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[1c3]"></a>correctGyro</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, imucalibration.o(i.correctGyro))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[1c0]"></a>correctMag</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, imucalibration.o(i.correctMag))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[153]"></a>d_packet_add</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, d_packet.o(i.d_packet_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = d_packet_add
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[155]"></a>d_packet_get_next_usr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, d_packet.o(i.d_packet_get_next_usr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = d_packet_get_next_usr
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_csm_getdata
</UL>

<P><STRONG><a name="[1bd]"></a>d_packet_get_size</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, d_packet.o(i.d_packet_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_csm_getdata
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_size_cb
</UL>

<P><STRONG><a name="[1c8]"></a>d_packet_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, d_packet.o(i.d_packet_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[1be]"></a>d_packet_skip_next</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, d_packet.o(i.d_packet_skip_next))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_csm_getdata
</UL>

<P><STRONG><a name="[e0]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[160]"></a>factory_test_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, test.o(i.factory_test_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = factory_test_init &rArr; test_board_only_factory &rArr; rf_init_bond_info &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[164]"></a>fds_gc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
</UL>

<P><STRONG><a name="[168]"></a>fds_init</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_init
</UL>

<P><STRONG><a name="[16d]"></a>fds_record_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
</UL>

<P><STRONG><a name="[16e]"></a>fds_record_find</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
</UL>

<P><STRONG><a name="[16f]"></a>fds_record_open</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
</UL>

<P><STRONG><a name="[171]"></a>fds_record_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
</UL>

<P><STRONG><a name="[173]"></a>fds_record_write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
</UL>

<P><STRONG><a name="[174]"></a>fds_register</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fds.o(i.fds_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fds_register &rArr; nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_init
</UL>

<P><STRONG><a name="[175]"></a>fr_deinit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fr2522.o(i.fr_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fr_deinit &rArr; nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_disable
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[5e]"></a>fr_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fr2522.o(i.fr_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fr_event &rArr; fr_start &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fr2522.o(i.fr_init)
</UL>
<P><STRONG><a name="[266]"></a>fr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fr2522.o(i.fr_get))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[5d]"></a>fr_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fr2522.o(i.fr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fr_handler &rArr; nrfx_twi_rx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fr2522.o(i.fr_init)
</UL>
<P><STRONG><a name="[17a]"></a>fr_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fr2522.o(i.fr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fr_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>fr_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fr2522.o(i.fr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fr_start &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_event
</UL>

<P><STRONG><a name="[189]"></a>get_boardId_batteryInitLevel</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ctll.o(i.get_boardId_batteryInitLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_boardId_batteryInitLevel &rArr; saadc_boardId_batteryLevel_init &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_boardId_batteryLevel_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ce]"></a>getfloat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imucalibration.o(i.getfloat))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuinitCalib
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[28b]"></a>hall1_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, input.o(i.hall1_get))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[7d]"></a>hall1_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, input.o(i.hall1_set))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.saadc_init_chanel)
</UL>
<P><STRONG><a name="[28c]"></a>hall2_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, input.o(i.hall2_get))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[7e]"></a>hall2_set</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, input.o(i.hall2_set))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.saadc_init_chanel)
</UL>
<P><STRONG><a name="[267]"></a>hall_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, input.o(i.hall_get))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[1b4]"></a>icm20601CheckDataReady</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20601.o(i.icm20601CheckDataReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[199]"></a>icm20601DisableFifo</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm20601.o(i.icm20601DisableFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icm20601DisableFifo &rArr; icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetSensorPeriod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableFifo
</UL>

<P><STRONG><a name="[1a2]"></a>icm20601EnableDrdyInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20601.o(i.icm20601EnableDrdyInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601EnableDrdyInterrupt &rArr; icm20601SetRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
</UL>

<P><STRONG><a name="[1a4]"></a>icm20601EnableFifo</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, icm20601.o(i.icm20601EnableFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icm20601EnableFifo &rArr; icm20601DisableFifo &rArr; icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetSensorPeriod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
</UL>

<P><STRONG><a name="[19d]"></a>icm20601EnableInterrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20601.o(i.icm20601EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601EnableInterrupt &rArr; icm20601SetRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[19c]"></a>icm20601EnableSensor</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, icm20601.o(i.icm20601EnableSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icm20601EnableSensor &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableFifo
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableDrdyInterrupt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoDataSetup
</UL>

<P><STRONG><a name="[1a7]"></a>icm20601GetIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20601.o(i.icm20601GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20601GetIntStatus &rArr; icm20601ReadReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[195]"></a>icm20601GetWhoami</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20601.o(i.icm20601GetWhoami))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20601GetWhoami &rArr; icm20601ReadReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[1ab]"></a>icm20601PollFifoData</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, icm20601.o(i.icm20601PollFifoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icm20601PollFifoData &rArr; icm20601ResetFifo &rArr; icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ResetFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[1ad]"></a>icm20601PollFifoDataSetup</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, icm20601.o(i.icm20601PollFifoDataSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icm20601PollFifoDataSetup &rArr; icm20601EnableSensor &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[1a6]"></a>icm20601PowerManager</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, icm20601.o(i.icm20601PowerManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowPower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowNoise
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowNoise
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetSensorPeriod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
</UL>

<P><STRONG><a name="[1a8]"></a>icm20601ReadReg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, icm_usr.o(i.icm20601ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20601ReadReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoDataSetup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoData
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GetWhoami
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GetIntStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>

<P><STRONG><a name="[1ac]"></a>icm20601ResetFifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20601.o(i.icm20601ResetFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601ResetFifo &rArr; icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoData
</UL>

<P><STRONG><a name="[192]"></a>icm20601SetAccelBw</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, icm20601.o(i.icm20601SetAccelBw))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowNoise
</UL>

<P><STRONG><a name="[191]"></a>icm20601SetAccelFsr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SetAccelFsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SetAccelFsr &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowNoise
</UL>

<P><STRONG><a name="[1af]"></a>icm20601SetDivider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20601.o(i.icm20601SetDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = icm20601SetDivider &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
</UL>

<P><STRONG><a name="[19a]"></a>icm20601SetFifoMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, icm20601.o(i.icm20601SetFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SetFifoMode &rArr; icm20601SetRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[19f]"></a>icm20601SetGyroFsrAndBw</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SetGyroFsrAndBw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SetGyroFsrAndBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowPower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowNoise
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
</UL>

<P><STRONG><a name="[af]"></a>icm20601SetPwrDefault</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SetPwrDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SetPwrDefault &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIcm20601
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[19b]"></a>icm20601SetSensorPeriod</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SetSensorPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icm20601SetSensorPeriod &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableFifo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[196]"></a>icm20601SoftReset</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SoftReset &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepUs
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[1b1]"></a>icm20601WriteReg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, icm_usr.o(i.icm20601WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>

<P><STRONG><a name="[190]"></a>icm20602SleepMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm_usr.o(i.icm20602SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icm20602SleepMs &rArr; nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SoftReset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SoftReset
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowPower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowNoise
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowNoise
</UL>

<P><STRONG><a name="[1b0]"></a>icm20602SleepUs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm_usr.o(i.icm20602SleepUs))
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SoftReset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SoftReset
</UL>

<P><STRONG><a name="[197]"></a>icm20602SoftReset</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, icm20601.o(i.icm20602SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20602SoftReset &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepUs
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>

<P><STRONG><a name="[d1]"></a>icmSensorRaw2u</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, icm_usr.o(i.icmSensorRaw2u))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icmSensorRaw2u
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorRaw2u
</UL>

<P><STRONG><a name="[d4]"></a>icmSensorinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm_usr.o(i.icmSensorinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icmSensorinit &rArr; icm20601AppInit &rArr; icm20601SetSensorPeriod &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorinit
</UL>

<P><STRONG><a name="[d7]"></a>icmSetdatacb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm_usr.o(i.icmSetdatacb))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setdatacb
</UL>

<P><STRONG><a name="[1b3]"></a>icm_GetSensorAccGyroData</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, icm_usr.o(i.icm_GetSensorAccGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = icm_GetSensorAccGyroData &rArr; icm20601PollFifoDataSetup &rArr; icm20601EnableSensor &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ResetFifo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoDataSetup
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PollFifoData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GetIntStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601CheckDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_spi_event
</UL>

<P><STRONG><a name="[5f]"></a>id_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, input.o(i.id_set))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.get_boardId_batteryInitLevel)
</UL>
<P><STRONG><a name="[1ca]"></a>imuClearCalibratedStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, imucalibration.o(i.imuClearCalibratedStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
</UL>

<P><STRONG><a name="[1b5]"></a>imu_Deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu_wrp.o(i.imu_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = imu_Deinit &rArr; mag_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[1b7]"></a>imu_calib</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, imu_wrp.o(i.imu_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = imu_calib &rArr; tryCalibration &rArr; calibrateAcc &rArr; matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_off
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_get_latest
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_vote_sleep
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[1bc]"></a>imu_csm_getdata</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, imu_wrp.o(i.imu_csm_getdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = imu_csm_getdata &rArr; d_packet_get_next_usr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_get_size
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_skip_next
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_get_next_usr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[61]"></a>imu_handler</STRONG> (Thumb, 840 bytes, Stack size 192 bytes, imu_wrp.o(i.imu_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = imu_handler &rArr; imu_calib &rArr; tryCalibration &rArr; calibrateAcc &rArr; matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_test_check_callback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_get_unlock
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quaternion2AxisAngle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickAHRSupdateWithoutMag
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_get_latest
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_add
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_vote_sleep
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctMag
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctGyro
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correctAcc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_wrp.o(i.imu_init)
</UL>
<P><STRONG><a name="[1c5]"></a>imu_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, imu_wrp.o(i.imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = imu_init &rArr; mag_start &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_start
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1fc]"></a>imu_register_acc_gyro_drv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, imu_wrp.o(i.imu_register_acc_gyro_drv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>imu_register_mag_drv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, imu_wrp.o(i.imu_register_mag_drv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>imu_set_calib</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, imu_wrp.o(i.imu_set_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = imu_set_calib &rArr; startCalib &rArr; resetAccCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCalib
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuClearCalibratedStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_clib_handler
</UL>

<P><STRONG><a name="[286]"></a>imu_set_test</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu_wrp.o(i.imu_set_test))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1c1]"></a>imu_test_check_callback</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, test.o(i.imu_test_check_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = imu_test_check_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[1bb]"></a>imu_vote_sleep</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, imu_wrp.o(i.imu_vote_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = imu_vote_sleep &rArr; power_set_off &rArr; power_off_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_off
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
</UL>

<P><STRONG><a name="[1cc]"></a>imuinitCalib</STRONG> (Thumb, 486 bytes, Stack size 80 bytes, imucalibration.o(i.imuinitCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = imuinitCalib &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>input_Deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, input.o(i.input_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[1d2]"></a>input_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, input.o(i.input_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = input_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>invutri</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, imucalibration.o(i.invutri))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = invutri
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv
</UL>

<P><STRONG><a name="[20c]"></a>invutri_1</STRONG> (Thumb, 182 bytes, Stack size 28 bytes, imucalibration.o(i.invutri_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = invutri_1
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matrix_inv_1
</UL>

<P><STRONG><a name="[28d]"></a>isaccCalib</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imucalibration.o(i.isaccCalib))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[28e]"></a>isgyroCalib</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imucalibration.o(i.isgyroCalib))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[131]"></a>led_bonding</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, led.o(i.led_bonding))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = led_bonding &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_connfig
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[145]"></a>led_calib</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, led.o(i.led_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_connfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAccCalibration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagCalibration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
</UL>

<P><STRONG><a name="[1d7]"></a>led_connfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led.o(i.led_connfig))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bonding
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_testmode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
</UL>

<P><STRONG><a name="[62]"></a>led_handler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, led.o(i.led_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = led_handler &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.led_init)
</UL>
<P><STRONG><a name="[1d9]"></a>led_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>led_keypress</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led.o(i.led_keypress))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[14c]"></a>led_off</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_off &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_testmode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAccCalibration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagCalibration
</UL>

<P><STRONG><a name="[1da]"></a>led_on_always</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.led_on_always))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_on_always &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1db]"></a>led_powerOn</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, led.o(i.led_powerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = led_powerOn &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_connfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1d8]"></a>led_start</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, led.o(i.led_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bonding
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_testmode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
</UL>

<P><STRONG><a name="[1dc]"></a>led_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, led.o(i.led_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[1dd]"></a>led_testmode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, led.o(i.led_testmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = led_testmode &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_connfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[1e1]"></a>lsm6dsr_acceleration_raw_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsr_reg.o(i.lsm6dsr_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsr_acceleration_raw_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[1e3]"></a>lsm6dsr_angular_rate_raw_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsr_reg.o(i.lsm6dsr_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsr_angular_rate_raw_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[1e4]"></a>lsm6dsr_block_data_update_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_block_data_update_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e6]"></a>lsm6dsr_data_ready_mode_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_data_ready_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_data_ready_mode_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e7]"></a>lsm6dsr_device_id_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsr_reg.o(i.lsm6dsr_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsr_device_id_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e8]"></a>lsm6dsr_fsm_data_rate_get</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_fsm_data_rate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsr_fsm_data_rate_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
</UL>

<P><STRONG><a name="[1ea]"></a>lsm6dsr_fsm_enable_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_fsm_enable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
</UL>

<P><STRONG><a name="[b2]"></a>lsm6dsr_gy_data_rate_set</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, lsm6dsr_reg.o(i.lsm6dsr_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lsm6dsr_gy_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_enable_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disablelsm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1eb]"></a>lsm6dsr_gy_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_gy_full_scale_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1ec]"></a>lsm6dsr_i3c_disable_set</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6dsr_reg.o(i.lsm6dsr_i3c_disable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsr_i3c_disable_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e9]"></a>lsm6dsr_mem_bank_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_mem_bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_enable_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_data_rate_get
</UL>

<P><STRONG><a name="[1ed]"></a>lsm6dsr_pin_int1_route_get</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsr_pin_int1_route_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1ee]"></a>lsm6dsr_pin_int1_route_set</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lsm6dsr_pin_int1_route_set &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e2]"></a>lsm6dsr_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsr_reg.o(i.lsm6dsr_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_full_scale_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_flag_data_ready_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_reset_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_reset_get
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_i3c_disable_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_full_scale_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_device_id_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_data_ready_mode_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_block_data_update_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_angular_rate_raw_get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_acceleration_raw_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_enable_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_data_rate_get
</UL>

<P><STRONG><a name="[1ef]"></a>lsm6dsr_reset_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_reset_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1f0]"></a>lsm6dsr_reset_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_reset_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1e5]"></a>lsm6dsr_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lsm6dsr_reg.o(i.lsm6dsr_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsm6dsr_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_full_scale_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_reset_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_i3c_disable_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_full_scale_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_data_ready_mode_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_block_data_update_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_mem_bank_set
</UL>

<P><STRONG><a name="[b1]"></a>lsm6dsr_xl_data_rate_set</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, lsm6dsr_reg.o(i.lsm6dsr_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lsm6dsr_xl_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_enable_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_fsm_data_rate_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disablelsm
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[1f1]"></a>lsm6dsr_xl_flag_data_ready_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_xl_flag_data_ready_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_xl_flag_data_ready_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_GetSensorAccGyroData
</UL>

<P><STRONG><a name="[1f2]"></a>lsm6dsr_xl_full_scale_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6dsr_reg.o(i.lsm6dsr_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lsm6dsr_xl_full_scale_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_write_reg
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>

<P><STRONG><a name="[cf]"></a>lsmSensorDeinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm_usr.o(i.lsmSensorDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lsmSensorDeinit &rArr; Disablelsm &rArr; lsm6dsr_xl_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disablelsm
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorDeinit
</UL>

<P><STRONG><a name="[d2]"></a>lsmSensorRaw2u</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, lsm_usr.o(i.lsmSensorRaw2u))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lsmSensorRaw2u
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorRaw2u
</UL>

<P><STRONG><a name="[d5]"></a>lsmSensorinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm_usr.o(i.lsmSensorinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lsmSensorinit &rArr; lsmAppInit &rArr; lsm6dsr_xl_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmAppInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorinit
</UL>

<P><STRONG><a name="[d8]"></a>lsmSetdatacb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lsm_usr.o(i.lsmSetdatacb))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setdatacb
</UL>

<P><STRONG><a name="[1f4]"></a>lsm_GetSensorAccGyroData</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm_usr.o(i.lsm_GetSensorAccGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lsm_GetSensorAccGyroData &rArr; lsm6dsr_xl_flag_data_ready_get &rArr; lsm6dsr_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_flag_data_ready_get
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_angular_rate_raw_get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_acceleration_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_spi_event
</UL>

<P><STRONG><a name="[1f7]"></a>mag_add</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, magfifo.o(i.mag_add))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_handler
</UL>

<P><STRONG><a name="[1f8]"></a>mag_fifo_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, magfifo.o(i.mag_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_stop
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_init
</UL>

<P><STRONG><a name="[1ba]"></a>mag_get_latest</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, magfifo.o(i.mag_get_latest))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
</UL>

<P><STRONG><a name="[65]"></a>mag_handler</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, imu_wrp.o(i.mag_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mag_handler &rArr; mag_start_fast &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_add
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start_fast
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_wrp.o(i.mag_init)
</UL>
<P><STRONG><a name="[1c6]"></a>mag_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, imu_wrp.o(i.mag_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>

<P><STRONG><a name="[1c7]"></a>mag_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu_wrp.o(i.mag_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mag_start &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_handler
</UL>

<P><STRONG><a name="[1f6]"></a>mag_start_fast</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu_wrp.o(i.mag_start_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mag_start_fast &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_handler
</UL>

<P><STRONG><a name="[1b6]"></a>mag_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, imu_wrp.o(i.mag_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mag_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mag_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_Deinit
</UL>

<P><STRONG><a name="[51]"></a>main</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, ctll.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; imuinitCalib &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_cfg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_reg_cb
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_clocks_switch
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_debug_print
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuinitCalib
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_register_mag_drv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_register_acc_gyro_drv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tem_init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init_chanel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boardId_batteryInitLevel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bf]"></a>matToQuat</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, madgwickahrs.o(i.matToQuat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = matToQuat &rArr; NORM &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIGN
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NORM
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MadgwickInit
</UL>

<P><STRONG><a name="[13b]"></a>matrix_inv</STRONG> (Thumb, 120 bytes, Stack size 336 bytes, imucalibration.o(i.matrix_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invutri
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cholesky
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>

<P><STRONG><a name="[140]"></a>matrix_inv_1</STRONG> (Thumb, 118 bytes, Stack size 184 bytes, imucalibration.o(i.matrix_inv_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = matrix_inv_1 &rArr; cholesky_1 &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invutri_1
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cholesky_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
</UL>

<P><STRONG><a name="[13d]"></a>matrix_mul_vector</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, imucalibration.o(i.matrix_mul_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matrix_mul_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>

<P><STRONG><a name="[142]"></a>matrix_mul_vector_1</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, imucalibration.o(i.matrix_mul_vector_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matrix_mul_vector_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
</UL>

<P><STRONG><a name="[13a]"></a>matrix_t_mul</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, imucalibration.o(i.matrix_t_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = matrix_t_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>

<P><STRONG><a name="[13f]"></a>matrix_t_mul_1</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, imucalibration.o(i.matrix_t_mul_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = matrix_t_mul_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
</UL>

<P><STRONG><a name="[13c]"></a>matrix_t_mul_vector</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, imucalibration.o(i.matrix_t_mul_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matrix_t_mul_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>

<P><STRONG><a name="[141]"></a>matrix_t_mul_vector_1</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, imucalibration.o(i.matrix_t_mul_vector_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = matrix_t_mul_vector_1
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
</UL>

<P><STRONG><a name="[16b]"></a>nrf_atfifo_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[20d]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
</UL>

<P><STRONG><a name="[20f]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[210]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[212]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
</UL>

<P><STRONG><a name="[15d]"></a>nrf_atomic_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[15b]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[170]"></a>nrf_atomic_u32_add</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_add
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
</UL>

<P><STRONG><a name="[213]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>

<P><STRONG><a name="[217]"></a>nrf_atomic_u32_fetch_add</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_add
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[214]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[219]"></a>nrf_atomic_u32_sub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_u32_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_u32_sub
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[21d]"></a>nrf_drv_spi_init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_plat_init
</UL>

<P><STRONG><a name="[220]"></a>nrf_drv_twi_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twi_init &rArr; nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[224]"></a>nrf_esb_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_stop
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[226]"></a>nrf_esb_flush_tx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_flush_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_flush_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[227]"></a>nrf_esb_init</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_esb_init &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifos
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[22a]"></a>nrf_esb_read_rx_payload</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_read_rx_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_read_rx_payload
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[22b]"></a>nrf_esb_set_base_address_0</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_base_address_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_esb_set_base_address_0 &rArr; apply_address_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>

<P><STRONG><a name="[22f]"></a>nrf_esb_set_base_address_1</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_base_address_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_esb_set_base_address_1 &rArr; apply_address_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>

<P><STRONG><a name="[230]"></a>nrf_esb_set_prefixes</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_set_prefixes))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_esb_set_prefixes &rArr; apply_address_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_address_workarounds
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>

<P><STRONG><a name="[27a]"></a>nrf_esb_set_rf_channel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_set_rf_channel))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
</UL>

<P><STRONG><a name="[231]"></a>nrf_esb_skip_tx</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_esb.o(i.nrf_esb_skip_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_esb_skip_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[232]"></a>nrf_esb_start_rx</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_esb.o(i.nrf_esb_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_esb_start_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[276]"></a>nrf_esb_stop_rx</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_esb.o(i.nrf_esb_stop_rx))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
</UL>

<P><STRONG><a name="[234]"></a>nrf_esb_write_payload</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, nrf_esb.o(i.nrf_esb_write_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_send
</UL>

<P><STRONG><a name="[186]"></a>nrf_fstorage_erase</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[16a]"></a>nrf_fstorage_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage.o(i.nrf_fstorage_init))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[187]"></a>nrf_fstorage_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nrf_fstorage.o(i.nrf_fstorage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_within_bounds
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_aligned32
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[15c]"></a>nrf_nvmc_page_erase</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nrf_nvmc.o(i.nrf_nvmc_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[2a7]"></a>nrf_nvmc_write_words</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrf_nvmc.o(i.nrf_nvmc_write_words))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_nvmc_write_words
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[ce]"></a>nrfx_gpiote_in_event_disable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_gpiote_in_event_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorDeinit
</UL>

<P><STRONG><a name="[ee]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>

<P><STRONG><a name="[f2]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>

<P><STRONG><a name="[15a]"></a>nrfx_gpiote_in_is_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[f1]"></a>nrfx_gpiote_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>

<P><STRONG><a name="[f0]"></a>nrfx_gpiote_is_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plat_in_init
</UL>

<P><STRONG><a name="[240]"></a>nrfx_gpiote_out_init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
</UL>

<P><STRONG><a name="[241]"></a>nrfx_prs_acquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[122]"></a>nrfx_saadc_buffer_convert</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_boardId_batteryLevel_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_callback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boardId_batteryLevel_callback
</UL>

<P><STRONG><a name="[243]"></a>nrfx_saadc_channel_init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_boardId_batteryLevel_init
</UL>

<P><STRONG><a name="[245]"></a>nrfx_saadc_channel_uninit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>

<P><STRONG><a name="[21c]"></a>nrfx_saadc_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
</UL>

<P><STRONG><a name="[246]"></a>nrfx_saadc_limits_set</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_limit_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
</UL>

<P><STRONG><a name="[18c]"></a>nrfx_saadc_sample</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrfx_saadc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boardId_batteryInitLevel
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_handler
</UL>

<P><STRONG><a name="[18d]"></a>nrfx_saadc_uninit</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boardId_batteryInitLevel
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_deinit
</UL>

<P><STRONG><a name="[21e]"></a>nrfx_spim_init</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, nrfx_spim.o(i.nrfx_spim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[21f]"></a>nrfx_spim_xfer</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nrfx_spim.o(i.nrfx_spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[24a]"></a>nrfx_timer_compare</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[24e]"></a>nrfx_timer_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_uninit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_stop
</UL>

<P><STRONG><a name="[275]"></a>nrfx_timer_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[24b]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_init
</UL>

<P><STRONG><a name="[24c]"></a>nrfx_timer_init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_init
</UL>

<P><STRONG><a name="[24d]"></a>nrfx_timer_uninit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_stop
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_unint
</UL>

<P><STRONG><a name="[177]"></a>nrfx_twi_disable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrfx_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
</UL>

<P><STRONG><a name="[25a]"></a>nrfx_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrfx_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
</UL>

<P><STRONG><a name="[222]"></a>nrfx_twi_init</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nrfx_twi.o(i.nrfx_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_twi_init &rArr; nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[ad]"></a>nrfx_twi_rx</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrfx_twi.o(i.nrfx_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = nrfx_twi_rx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_handler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKI2C_RxData
</UL>

<P><STRONG><a name="[223]"></a>nrfx_twi_tx</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nrfx_twi.o(i.nrfx_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[250]"></a>nrfx_twi_xfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_twi.o(i.nrfx_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
</UL>

<P><STRONG><a name="[1ff]"></a>persist_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, persist.o(i.persist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = persist_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cd]"></a>persist_read</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, persist.o(i.persist_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imuinitCalib
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_bond_info
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_clear_bond_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[259]"></a>persist_write</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, persist.o(i.persist_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = persist_write &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_save_bond_info
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_clear_bond_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[d6]"></a>plat_in_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, imu_usr.o(i.plat_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = plat_in_init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorinit
</UL>

<P><STRONG><a name="[75]"></a>plat_spi_event</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, imu_usr.o(i.plat_spi_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = plat_spi_event &rArr; icm_GetSensorAccGyroData &rArr; icm20601PollFifoDataSetup &rArr; icm20601EnableSensor &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_GetSensorAccGyroData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_GetSensorAccGyroData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_usr.o(i.plat_in_init)
</UL>
<P><STRONG><a name="[1fb]"></a>port_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fr2522.o(i.port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = port_init &rArr; nrf_drv_twi_init &rArr; nrfx_twi_init &rArr; nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>power_check_handler</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, power.o(i.power_check_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = power_check_handler &rArr; saadc_deinit &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_Deinit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_stop
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_unint
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_stop
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_Deinit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_deinit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_Deinit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_stop
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_off
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power.o(i.power_check_init)
</UL>
<P><STRONG><a name="[206]"></a>power_check_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, power.o(i.power_check_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = power_check_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>power_check_stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, power.o(i.power_check_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = power_check_stop &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[262]"></a>power_off_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, power.o(i.power_off_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = power_off_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_off
</UL>

<P><STRONG><a name="[12f]"></a>power_set_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, power.o(i.power_set_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = power_set_off &rArr; power_off_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_off_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_vote_sleep
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
</UL>

<P><STRONG><a name="[1c4]"></a>quaternion2AxisAngle</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, madgwickahrs.o(i.quaternion2AxisAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = quaternion2AxisAngle &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[149]"></a>resetAccCalibration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, imucalibration.o(i.resetAccCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = resetAccCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startCalib
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
</UL>

<P><STRONG><a name="[146]"></a>resetInterval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, imucalibration.o(i.resetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
</UL>

<P><STRONG><a name="[143]"></a>resetMagCalibration</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, imucalibration.o(i.resetMagCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagCalibration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
</UL>

<P><STRONG><a name="[78]"></a>rf_bond_event</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, s_rf.o(i.rf_bond_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rf_bond_event &rArr; rf_save_bond_info &rArr; persist_write &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_cfg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_save_bond_info
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_rf.o(i.rf_start_bond)
</UL>
<P><STRONG><a name="[274]"></a>rf_clear_bond_info</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, s_rf.o(i.rf_clear_bond_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rf_clear_bond_info &rArr; persist_write &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_clr_handler
</UL>

<P><STRONG><a name="[7a]"></a>rf_data_event</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, s_rf.o(i.rf_data_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rf_data_event &rArr; rf_data_send &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_send
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_ramup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_get_unlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_rf.o(i.rf_start_data)
</UL>
<P><STRONG><a name="[279]"></a>rf_debug_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, s_rf.o(i.rf_debug_init))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
</UL>

<P><STRONG><a name="[209]"></a>rf_debug_print</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, s_rf.o(i.rf_debug_print))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[287]"></a>rf_get_bond_info</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, s_rf.o(i.rf_get_bond_info))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[278]"></a>rf_init_bond_info</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, s_rf.o(i.rf_init_bond_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rf_init_bond_info &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[207]"></a>rf_module_init_and_start</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, s_rf.o(i.rf_module_init_and_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = rf_module_init_and_start &rArr; rf_init_bond_info &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bonding
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_bond_info
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_debug_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>rf_module_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, s_rf.o(i.rf_module_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_module_stop &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_uninit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[270]"></a>rf_save_bond_info</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, s_rf.o(i.rf_save_bond_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rf_save_bond_info &rArr; persist_write &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[133]"></a>rf_start_bond</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, s_rf.o(i.rf_start_bond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rf_start_bond &rArr; rf_timer_init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_ramup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[132]"></a>rf_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, s_rf.o(i.rf_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_stop &rArr; nrf_esb_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_uninit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[260]"></a>rled_Deinit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rled.o(i.rled_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rled_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[1fe]"></a>rled_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rled.o(i.rled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rled_init &rArr; nrfx_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_get_dur
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26a]"></a>rled_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rled.o(i.rled_start))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_start
</UL>

<P><STRONG><a name="[27e]"></a>rled_test</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rled.o(i.rled_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rled_test
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[289]"></a>rm1_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, input.o(i.rm1_get))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[7f]"></a>rm1_set</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, input.o(i.rm1_set))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.saadc_init_chanel)
</UL>
<P><STRONG><a name="[28a]"></a>rm2_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, input.o(i.rm2_get))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[80]"></a>rm2_set</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, input.o(i.rm2_set))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.saadc_init_chanel)
</UL>
<P><STRONG><a name="[265]"></a>rm_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, input.o(i.rm_get))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[18a]"></a>saadc_boardId_batteryLevel_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, saadc.o(i.saadc_boardId_batteryLevel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = saadc_boardId_batteryLevel_init &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boardId_batteryInitLevel
</UL>

<P><STRONG><a name="[7c]"></a>saadc_callback</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, saadc.o(i.saadc_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = saadc_callback &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saadc.o(i.saadc_init)
</UL>
<P><STRONG><a name="[25c]"></a>saadc_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, saadc.o(i.saadc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = saadc_deinit &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[281]"></a>saadc_init</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, saadc.o(i.saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = saadc_init &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_init
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init_chanel
</UL>

<P><STRONG><a name="[204]"></a>saadc_init_chanel</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, ctll.o(i.saadc_init_chanel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = saadc_init_chanel &rArr; saadc_init &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_start
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[283]"></a>saadc_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saadc.o(i.saadc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saadc_start &rArr; saadc_time_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_start
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init_chanel
</UL>

<P><STRONG><a name="[81]"></a>saadc_time_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, saadc.o(i.saadc_time_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = saadc_time_handler &rArr; saadc_time_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> saadc.o(i.saadc_time_init)
</UL>
<P><STRONG><a name="[282]"></a>saadc_time_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, saadc.o(i.saadc_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = saadc_time_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
</UL>

<P><STRONG><a name="[284]"></a>saadc_time_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, saadc.o(i.saadc_time_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = saadc_time_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_time_handler
</UL>

<P><STRONG><a name="[269]"></a>set_data</STRONG> (Thumb, 238 bytes, Stack size 28 bytes, data.o(i.set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[263]"></a>set_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data.o(i.set_entry))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[264]"></a>set_imu_hc</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, data.o(i.set_imu_hc))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_data_cb
</UL>

<P><STRONG><a name="[297]"></a>setfloat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, imucalibration.o(i.setfloat))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryCalibration
</UL>

<P><STRONG><a name="[d3]"></a>spi_plat_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, imu_usr.o(i.spi_plat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_plat_init &rArr; nrf_drv_spi_init &rArr; nrfx_spim_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensorinit
</UL>

<P><STRONG><a name="[1cb]"></a>startCalib</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, imucalibration.o(i.startCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = startCalib &rArr; resetAccCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAccCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
</UL>

<P><STRONG><a name="[200]"></a>sys_clocks_switch</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.sys_clocks_switch))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>sys_tick_get_dur</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.sys_tick_get_dur))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
</UL>

<P><STRONG><a name="[1bf]"></a>sys_tick_get_unlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.sys_tick_get_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rled
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_handler
</UL>

<P><STRONG><a name="[201]"></a>sys_tick_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys.o(i.sys_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_tick_init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>sys_tick_irq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys.o(i.sys_tick_irq))
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.sys_tick_init)
</UL>
<P><STRONG><a name="[2a4]"></a>sys_tick_irqdisable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys.o(i.sys_tick_irqdisable))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rled
</UL>

<P><STRONG><a name="[2a5]"></a>sys_tick_irqenable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sys.o(i.sys_tick_irqenable))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rled
</UL>

<P><STRONG><a name="[202]"></a>sys_tick_reg_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.sys_tick_reg_cb))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[203]"></a>sys_tick_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.sys_tick_start))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>sys_tick_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.sys_tick_stop))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[25e]"></a>sys_tick_unint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.sys_tick_unint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_tick_unint &rArr; nrfx_timer_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[1f9]"></a>tem_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ctll.o(i.tem_init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>test_board_only_factory</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, test.o(i.test_board_only_factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = test_board_only_factory &rArr; rf_init_bond_info &rArr; persist_read &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_data
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_enable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm2_get
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm1_get
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_test
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_testmode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_powerOn
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on_always
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isgyroCalib
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaccCalib
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_test
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall2_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall1_get
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_bond_info
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_get_bond_info
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
</UL>

<P><STRONG><a name="[28f]"></a>test_calib_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test.o(i.test_calib_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = test_calib_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[290]"></a>test_cancel_calib</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.test_cancel_calib))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_cancel_calib &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[291]"></a>test_cancel_clr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.test_cancel_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_cancel_clr &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[292]"></a>test_cancel_exit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.test_cancel_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_cancel_exit &rArr; app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[293]"></a>test_clr_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test.o(i.test_clr_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = test_clr_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[294]"></a>test_exit_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, test.o(i.test_exit_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = test_exit_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[12d]"></a>test_key_process</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, test.o(i.test_key_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_key_process &rArr; test_exit_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mode_key_vib
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_exit_start
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_clr_start
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_exit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_clr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_cancel_calib
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_calib_start
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[295]"></a>test_mode_key_vib</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.test_mode_key_vib))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = test_mode_key_vib &rArr; vib_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
</UL>

<P><STRONG><a name="[14f]"></a>trig_rled</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rled.o(i.trig_rled))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_sys_tick_cb
</UL>

<P><STRONG><a name="[1b9]"></a>tryCalibration</STRONG> (Thumb, 1164 bytes, Stack size 152 bytes, imucalibration.o(i.tryCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tryCalibration &rArr; calibrateAcc &rArr; matrix_inv &rArr; cholesky &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_calib
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;persist_read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfloat
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetMagCalibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAccCalibration
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloat
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagCalibration
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkGyroAndAccCalibration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateMag
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
</UL>

<P><STRONG><a name="[5a]"></a>tst_check_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test.o(i.tst_check_handler))
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.factory_test_init)
</UL>
<P><STRONG><a name="[5c]"></a>tst_clib_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test.o(i.tst_clib_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tst_clib_handler &rArr; imu_set_calib &rArr; startCalib &rArr; resetAccCalibration &rArr; led_calib &rArr; led_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.factory_test_init)
</UL>
<P><STRONG><a name="[5b]"></a>tst_clr_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test.o(i.tst_clr_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tst_clr_handler &rArr; rf_clear_bond_info &rArr; persist_write &rArr; fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_clear_bond_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(i.factory_test_init)
</UL>
<P><STRONG><a name="[26b]"></a>update_rled</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rled.o(i.update_rled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_rled
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_irqenable
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_irqdisable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_get_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocal_datarr_cb
</UL>

<P><STRONG><a name="[261]"></a>vib_Deinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vib2.o(i.vib_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vib_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[208]"></a>vib_cfg</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, vib2.o(i.vib_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vib_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[288]"></a>vib_enable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, vib2.o(i.vib_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vib_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mode_key_vib
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_board_only_factory
</UL>

<P><STRONG><a name="[205]"></a>vib_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vib2.o(i.vib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>vib_timer_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aw8624.o(i.vib_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = vib_timer_handler &rArr; aw8624_haptic_stop &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> aw8624.o(i.aw8624_haptic_init)
<LI> aw8624.o(i.aw8624_haptic_long_vib_work)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>bsp_event_handler</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ctll.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_event_handler &rArr; rf_start_bond &rArr; rf_timer_init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_key_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_off
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_stop
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_keypress
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_bonding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[67]"></a>client_sys_tick_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctll.o(i.client_sys_tick_cb))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_rled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[18b]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ctll.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_boardId_batteryInitLevel
</UL>

<P><STRONG><a name="[68]"></a>protocal_data_cb</STRONG> (Thumb, 186 bytes, Stack size 80 bytes, ctll.o(i.protocal_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = protocal_data_cb &rArr; imu_csm_getdata &rArr; d_packet_get_next_usr
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_hc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_entry
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_csm_getdata
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hall_get
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_get_data
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[6a]"></a>protocal_data_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctll.o(i.protocal_data_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = protocal_data_start &rArr; imu_init &rArr; mag_start &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_start
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[6c]"></a>protocal_data_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ctll.o(i.protocal_data_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = protocal_data_stop &rArr; power_set_off &rArr; power_off_start &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_set_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[6b]"></a>protocal_datarr_cb</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ctll.o(i.protocal_datarr_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = protocal_datarr_cb &rArr; update_rled
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[6d]"></a>protocal_link_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctll.o(i.protocal_link_state))
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[69]"></a>protocal_size_cb</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctll.o(i.protocal_size_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = protocal_size_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_packet_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctll.o(i.main)
</UL>
<P><STRONG><a name="[124]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_init
</UL>

<P><STRONG><a name="[127]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[6e]"></a>spim_evt_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.spim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(i.nrf_drv_spi_init)
</UL>
<P><STRONG><a name="[298]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[299]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[221]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[6f]"></a>twi_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[242]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[23f]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[23d]"></a>channel_port_alloc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[b7]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[23e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_out_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[b9]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[23b]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[23c]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[23a]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[239]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_spim.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
</UL>

<P><STRONG><a name="[c8]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[c9]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[c7]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[285]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_spim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[249]"></a>spim_xfer</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nrfx_spim.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>

<P><STRONG><a name="[c2]"></a>irq_handler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nrfx_pwm.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler &rArr; nrf_pwm_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_clear
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwm_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_IRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_pwm_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_pwm.o(i.nrf_pwm_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_pwm_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_pwm.o(i.nrf_pwm_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pwm_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[c6]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[244]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
</UL>

<P><STRONG><a name="[c4]"></a>nrf_saadc_event_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[247]"></a>nrf_saadc_limit_int_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_limit_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
</UL>

<P><STRONG><a name="[248]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>

<P><STRONG><a name="[24f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_twi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_init
</UL>

<P><STRONG><a name="[29f]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[29d]"></a>nrf_twi_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[ca]"></a>twi_irq_handler</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, nrfx_twi.o(i.twi_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = twi_irq_handler &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[29e]"></a>twi_process_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[29b]"></a>twi_rx_start_transfer</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, nrfx_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[2a0]"></a>twi_send_byte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, nrfx_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = twi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[29a]"></a>twi_transfer</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, nrfx_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[29c]"></a>twi_tx_start_transfer</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, nrfx_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_irq_handler
</UL>

<P><STRONG><a name="[251]"></a>twi_xfer</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, nrfx_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_xfer
</UL>

<P><STRONG><a name="[d9]"></a>irq_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_timer_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[156]"></a>delete_execute</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = delete_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[26d]"></a>event_prepare</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, fds.o(i.event_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = event_prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[169]"></a>event_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[21]"></a>fs_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[17e]"></a>gc_execute</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[180]"></a>gc_next_page</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[183]"></a>gc_page_erase</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gc_page_erase &rArr; nrf_fstorage_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[182]"></a>gc_record_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[181]"></a>gc_record_find_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[17f]"></a>gc_state_advance</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gc_state_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[256]"></a>header_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.header_check))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[257]"></a>header_has_next</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.header_has_next))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[1cf]"></a>init_execute</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_execute &rArr; page_tag_write_swap &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[26e]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[258]"></a>page_identify</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[2aa]"></a>page_offsets_update</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[255]"></a>page_scan</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[184]"></a>page_tag_write_data</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = page_tag_write_data &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[185]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = page_tag_write_swap &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[16c]"></a>pages_init</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[165]"></a>queue_buf_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_buf_get &rArr; nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[166]"></a>queue_buf_store</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fds.o(i.queue_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_buf_store &rArr; nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[17d]"></a>queue_process</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_sub
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[167]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_add
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
</UL>

<P><STRONG><a name="[159]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
</UL>

<P><STRONG><a name="[157]"></a>record_find_by_desc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
</UL>

<P><STRONG><a name="[188]"></a>record_find_next</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_has_next
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_check
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[158]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[172]"></a>write_enqueue</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr; gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_store
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_buf_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_add
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[26c]"></a>write_execute</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_execute &rArr; record_header_flag_dirty &rArr; nrf_fstorage_write
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[2a9]"></a>write_space_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[2a8]"></a>write_space_reserve</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[237]"></a>addr_is_aligned32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_aligned32))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
</UL>

<P><STRONG><a name="[236]"></a>addr_is_within_bounds</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_fstorage.o(i.addr_is_within_bounds))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_erase
</UL>

<P><STRONG><a name="[8b]"></a>erase</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, nrf_fstorage_nvmc.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = erase &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_page_erase
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>event_send</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, nrf_fstorage_nvmc.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[87]"></a>init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.init))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>is_busy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_nvmc.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>rmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>uninit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_fstorage_nvmc.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uninit &rArr; nrf_atomic_flag_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>wmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_fstorage_nvmc.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, nrf_fstorage_nvmc.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write &rArr; event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_words
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_nvmc.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[101]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[150]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[296]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1de]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[151]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fb]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[84]"></a>timeout_handler_scheduled_exec</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_scheduled_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_scheduled_exec
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer.o(i.timer_timeouts_check)
</UL>
<P><STRONG><a name="[cd]"></a>timer_list_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_EGU1_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1df]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[103]"></a>timer_stop_op_schedule</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[c3]"></a>timer_timeouts_check</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_timeouts_check &rArr; app_sched_event_put
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[59]"></a>alert_timer_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[8f]"></a>bsp_button_event_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>bsp_led_indication</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bsp_led_indication &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
</UL>

<P><STRONG><a name="[57]"></a>button_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[137]"></a>leds_off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.leds_off))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[58]"></a>leds_timer_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[55]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[54]"></a>gpiote_event_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_is_set
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[233]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[cb]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_skip_tx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_skip_tx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_read_rx_payload
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_flush_tx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
</UL>

<P><STRONG><a name="[254]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[229]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_esb.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[22c]"></a>addr_conv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_esb.o(i.addr_conv))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[22e]"></a>apply_address_workarounds</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, nrf_esb.o(i.apply_address_workarounds))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = apply_address_workarounds
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[2a1]"></a>bytewise_bit_swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.bytewise_bit_swap))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_addresses
</UL>

<P><STRONG><a name="[252]"></a>clear_events_restart_rx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_esb.o(i.clear_events_restart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clear_events_restart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[70]"></a>on_radio_disabled_rx</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, nrf_esb.o(i.on_radio_disabled_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = on_radio_disabled_rx &rArr; rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_events_restart_rx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.nrf_esb_start_rx)
<LI> nrf_esb.o(i.on_radio_disabled_rx_ack)
</UL>
<P><STRONG><a name="[71]"></a>on_radio_disabled_rx_ack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_rx_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_radio_disabled_rx_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_rx)
</UL>
<P><STRONG><a name="[73]"></a>on_radio_disabled_tx</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_esb.o(i.on_radio_disabled_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_radio_disabled_tx
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack)
<LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[82]"></a>on_radio_disabled_tx_noack</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_esb.o(i.on_radio_disabled_tx_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_radio_disabled_tx_noack &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_skip_tx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.start_tx_transaction)
</UL>
<P><STRONG><a name="[72]"></a>on_radio_disabled_tx_wait_for_ack</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, nrf_esb.o(i.on_radio_disabled_tx_wait_for_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_radio_disabled_tx_wait_for_ack &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_skip_tx
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tx_transaction
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_fifo_push_rfbuf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.on_radio_disabled_tx)
</UL>
<P><STRONG><a name="[225]"></a>reset_fifos</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_esb.o(i.reset_fifos))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
</UL>

<P><STRONG><a name="[253]"></a>rx_fifo_push_rfbuf</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_esb.o(i.rx_fifo_push_rfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_fifo_push_rfbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_rx
</UL>

<P><STRONG><a name="[235]"></a>start_tx_transaction</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrf_esb.o(i.start_tx_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_wait_for_ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_radio_disabled_tx_noack
</UL>

<P><STRONG><a name="[22d]"></a>update_radio_addresses</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_esb.o(i.update_radio_addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = update_radio_addresses
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytewise_bit_swap
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_conv
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
</UL>

<P><STRONG><a name="[2a3]"></a>update_radio_bitrate</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_bitrate))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[228]"></a>update_radio_parameters</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_esb.o(i.update_radio_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_radio_parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_tx_power
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
</UL>

<P><STRONG><a name="[2a2]"></a>update_radio_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_esb.o(i.update_radio_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_radio_parameters
</UL>

<P><STRONG><a name="[86]"></a>update_rf_payload_format_esb</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_parameters)
</UL>
<P><STRONG><a name="[85]"></a>update_rf_payload_format_esb_dpl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_esb.o(i.update_rf_payload_format_esb_dpl))
<BR>[Address Reference Count : 1]<UL><LI> nrf_esb.o(i.update_radio_parameters)
</UL>
<P><STRONG><a name="[f5]"></a>internal_error_process</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.internal_error_process))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_tick_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[272]"></a>rf_change_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, s_rf.o(i.rf_change_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rf_change_address &rArr; nrf_esb_set_prefixes &rArr; apply_address_workarounds
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_prefixes
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_1
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_base_address_0
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_ramup
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[273]"></a>rf_change_ramup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, s_rf.o(i.rf_change_ramup))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>

<P><STRONG><a name="[277]"></a>rf_data_send</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, s_rf.o(i.rf_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rf_data_send &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_write_payload
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
</UL>

<P><STRONG><a name="[26f]"></a>rf_set_channel</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, s_rf.o(i.rf_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_set_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_set_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_event
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_data
</UL>

<P><STRONG><a name="[271]"></a>rf_start_data</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, s_rf.o(i.rf_start_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rf_start_data &rArr; rf_timer_init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_stop_rx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_disable
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_timer_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_module_init_and_start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_bond_event
</UL>

<P><STRONG><a name="[77]"></a>rf_timer_bond</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, s_rf.o(i.rf_timer_bond))
<BR>[Address Reference Count : 1]<UL><LI> s_rf.o(i.rf_start_bond)
</UL>
<P><STRONG><a name="[79]"></a>rf_timer_data</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, s_rf.o(i.rf_timer_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rf_timer_data &rArr; rf_data_send &rArr; nrf_esb_write_payload &rArr; start_tx_transaction
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_disable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_start_rx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_esb_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_channel
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_send
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_ramup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_change_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s_rf.o(i.rf_start_data)
</UL>
<P><STRONG><a name="[27b]"></a>rf_timer_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, s_rf.o(i.rf_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rf_timer_init &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_bond
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_start_data
</UL>

<P><STRONG><a name="[162]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, test.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_test_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tst_clr_handler
</UL>

<P><STRONG><a name="[27c]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rled.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trig_rled
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_Deinit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_test
</UL>

<P><STRONG><a name="[27f]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rled.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rled_test
</UL>

<P><STRONG><a name="[1d3]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, input.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
</UL>

<P><STRONG><a name="[1d1]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, input.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_Deinit
</UL>

<P><STRONG><a name="[74]"></a>fds_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, persist.o(i.fds_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> persist.o(i.persist_init)
</UL>
<P><STRONG><a name="[25f]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, power.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_check_handler
</UL>

<P><STRONG><a name="[17c]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, fr2522.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
</UL>

<P><STRONG><a name="[238]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fr2522.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[178]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fr2522.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
</UL>

<P><STRONG><a name="[17b]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fr2522.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
</UL>

<P><STRONG><a name="[176]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fr2522.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_deinit
</UL>

<P><STRONG><a name="[21b]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_init &rArr; nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_boardId_batteryLevel_init
</UL>

<P><STRONG><a name="[280]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, saadc.o(i.nrf_gpio_cfg_default))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_deinit
</UL>

<P><STRONG><a name="[18e]"></a>icm20601AccelToLowNoise</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, icm20601.o(i.icm20601AccelToLowNoise))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = icm20601AccelToLowNoise &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[193]"></a>icm20601AccelToLowPower</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, icm20601.o(i.icm20601AccelToLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icm20601AccelToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[19e]"></a>icm20601AxisToLowNoise</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, icm20601.o(i.icm20601AxisToLowNoise))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = icm20601AxisToLowNoise &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[1a0]"></a>icm20601AxisToLowPower</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, icm20601.o(i.icm20601AxisToLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[1a1]"></a>icm20601ClrRegBits</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, icm20601.o(i.icm20601ClrRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetFifoMode
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ResetFifo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableDrdyInterrupt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
</UL>

<P><STRONG><a name="[1a9]"></a>icm20601GyroToLowNoise</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, icm20601.o(i.icm20601GyroToLowNoise))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icm20601GyroToLowNoise &rArr; icm20601SetGyroFsrAndBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[1aa]"></a>icm20601GyroToLowPower</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, icm20601.o(i.icm20601GyroToLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icm20601GyroToLowPower &rArr; icm20601SetGyroFsrAndBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
</UL>

<P><STRONG><a name="[db]"></a>icm20601ReadRegOne</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20601.o(i.icm20601ReadRegOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icm20601ReadRegOne &rArr; icm20601ReadReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SoftReset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SoftReset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableFifo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegDebug
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>

<P><STRONG><a name="[1a3]"></a>icm20601SetRegBits</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, icm20601.o(i.icm20601SetRegBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = icm20601SetRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetFifoMode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableInterrupt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableDrdyInterrupt
</UL>

<P><STRONG><a name="[1a5]"></a>icm20601SmplartDmpOdrs</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, icm20601.o(i.icm20601SmplartDmpOdrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icm20601SmplartDmpOdrs &rArr; icm20601ClrRegBits &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetDivider
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteRegOne
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadRegOne
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetSensorPeriod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
</UL>

<P><STRONG><a name="[18f]"></a>icm20601WriteRegOne</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, icm20601.o(i.icm20601WriteRegOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SoftReset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SoftReset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetPwrDefault
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetGyroFsrAndBw
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetDivider
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelFsr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetAccelBw
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601PowerManager
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableFifo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SmplartDmpOdrs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetRegBits
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowPower
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GyroToLowNoise
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ClrRegBits
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowPower
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AxisToLowNoise
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AccelToLowNoise
</UL>

<P><STRONG><a name="[194]"></a>icm20601AppInit</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, icm_usr.o(i.icm20601AppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icm20601AppInit &rArr; icm20601SetSensorPeriod &rArr; icm20601PowerManager &rArr; icm20601AxisToLowPower &rArr; icm20601SetAccelBw &rArr; icm20601WriteRegOne &rArr; icm20601WriteReg &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SoftReset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SoftReset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetSensorPeriod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetPwrDefault
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601SetFifoMode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601GetWhoami
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableSensor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601EnableInterrupt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601DisableFifo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegDebug
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmSensorinit
</UL>

<P><STRONG><a name="[198]"></a>nrf_delay_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, icm_usr.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601AppInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepMs
</UL>

<P><STRONG><a name="[1ae]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, icm_usr.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601WriteReg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20601ReadReg
</UL>

<P><STRONG><a name="[1b2]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm_usr.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602SleepUs
</UL>

<P><STRONG><a name="[1f3]"></a>lsmAppInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lsm_usr.o(i.lsmAppInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lsmAppInit &rArr; lsm6dsr_xl_data_rate_set &rArr; lsm6dsr_fsm_enable_get &rArr; lsm6dsr_mem_bank_set &rArr; lsm6dsr_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_full_scale_set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_xl_data_rate_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_reset_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_reset_get
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_pin_int1_route_get
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_i3c_disable_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_full_scale_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_gy_data_rate_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_device_id_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_data_ready_mode_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsr_block_data_update_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsmSensorinit
</UL>

<P><STRONG><a name="[64]"></a>lsm_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lsm_usr.o(i.lsm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lsm_read &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm_usr.o(i.lsmAppInit)
</UL>
<P><STRONG><a name="[63]"></a>lsm_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lsm_usr.o(i.lsm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lsm_write &rArr; nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm_usr.o(i.lsmAppInit)
</UL>
<P><STRONG><a name="[1f5]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lsm_usr.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrfx_spim_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm_read
</UL>

<P><STRONG><a name="[d0]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, imu_usr.o(i.nrf_gpio_cfg_default))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorDeinit
</UL>

<P><STRONG><a name="[1b8]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, imu_wrp.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_set_calib
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_calib
</UL>

<P><STRONG><a name="[aa]"></a>AKI2C_RxData</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, akm09911.o(i.AKI2C_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = AKI2C_RxData &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_rx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKECS_GetData
</UL>

<P><STRONG><a name="[ac]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, akm09911.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKI2C_RxData
</UL>

<P><STRONG><a name="[ab]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, akm09911.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AKECS_GetData
</UL>

<P><STRONG><a name="[106]"></a>aw8624_haptic_active</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_interrupt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
</UL>

<P><STRONG><a name="[112]"></a>aw8624_haptic_later_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, aw8624.o(i.aw8624_haptic_later_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = aw8624_haptic_later_init &rArr; aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_swicth_motorprotect_config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_break
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
</UL>

<P><STRONG><a name="[10d]"></a>aw8624_haptic_play_go</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_play_go))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aw8624_haptic_play_go &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
</UL>

<P><STRONG><a name="[10c]"></a>aw8624_haptic_play_mode</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_play_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = aw8624_haptic_play_mode &rArr; aw8624_haptic_active &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_ram_break
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_active
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_f0_calibration
</UL>

<P><STRONG><a name="[117]"></a>aw8624_haptic_ram_break</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_ram_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aw8624_haptic_ram_break &rArr; aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_mode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
</UL>

<P><STRONG><a name="[114]"></a>aw8624_haptic_rtp_get_fifo_afi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_rtp_get_fifo_afi))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = aw8624_haptic_rtp_get_fifo_afi &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_going
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_irq_handler
</UL>

<P><STRONG><a name="[11d]"></a>aw8624_haptic_rtp_going</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_haptic_rtp_going))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = aw8624_haptic_rtp_going &rArr; aw8624_haptic_set_rtp_aei &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_writes
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_set_rtp_aei
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_get_fifo_afi
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
</UL>

<P><STRONG><a name="[11b]"></a>aw8624_haptic_set_gain</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aw8624_haptic_set_gain &rArr; aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[115]"></a>aw8624_haptic_set_rtp_aei</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aw8624.o(i.aw8624_haptic_set_rtp_aei))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = aw8624_haptic_set_rtp_aei &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_going
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_irq_handler
</UL>

<P><STRONG><a name="[11a]"></a>aw8624_haptic_set_wav_loop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_set_wav_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aw8624_haptic_set_wav_loop &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[119]"></a>aw8624_haptic_set_wav_seq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_set_wav_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = aw8624_haptic_set_wav_seq &rArr; aw8624_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_short_vib_work
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_long_vib_work
</UL>

<P><STRONG><a name="[116]"></a>aw8624_haptic_swicth_motorprotect_config</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_haptic_swicth_motorprotect_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = aw8624_haptic_swicth_motorprotect_config &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_later_init
</UL>

<P><STRONG><a name="[108]"></a>aw8624_interrupt_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aw8624.o(i.aw8624_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = aw8624_interrupt_clear &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_active
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_rtp_vib_work
</UL>

<P><STRONG><a name="[111]"></a>aw8624_ram_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, aw8624.o(i.aw8624_ram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = aw8624_ram_init &rArr; aw8624_i2c_write_bits &rArr; aw8624_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write_bits
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_init
</UL>

<P><STRONG><a name="[10e]"></a>nrf_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, aw8624.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_read_chipid
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_hw_reset
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_get_f0
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_play_go
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_vbat_monitor_detector
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_stop
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_haptic_lra_resistance_detector
</UL>

<P><STRONG><a name="[120]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, aw8624.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twi_tx &rArr; nrfx_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_writes
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_i2c_read
</UL>

<P><STRONG><a name="[11e]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aw8624.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_hw_reset
</UL>

<P><STRONG><a name="[11f]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aw8624.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aw8624_hw_reset
</UL>

<P><STRONG><a name="[2a6]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vib2.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vib_Deinit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
